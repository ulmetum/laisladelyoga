---
import { ViewTransitions } from 'astro:transitions'
import '@fontsource/ubuntu'
import '@fontsource/ubuntu/300.css'
import '@fontsource/ubuntu/400.css'

import '@fontsource/oswald'
import '@fontsource/oswald/300.css'
import '@fontsource/oswald/400.css'
import '@fontsource/oswald/700.css'
import '@/styles/global.css'

import Footer from '@/components/Footer.astro'
import NavBar from '@/components/NavBar.astro'

import 'lenis/dist/lenis.css'

interface Props {
	title: string
	description: string
	image?: string
}

const {
	title,
	description = 'Blog sobre Prácticas de Yoga y meditación',
	image = 'https://laisladelyoga.com/wp-content/uploads/2024/05/Miriam-Yoga-6.webp'
} = Astro.props

// const currentPath = Astro.url.pathname
---

<html lang="es">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<title>{title}</title>
		<!-- Meta tags -->
		<meta data-pagefind-meta="title[content]" name="title" content={title} />
		<meta name="description" content={description} />

		<!-- Open Graph / Facebook -->
		<meta property="og:title" content={title} />
		<meta property="og:url" content={Astro.url} />
		<meta property="og:description" content={description} />
		<meta property="og:type" content="website" />
		<meta property="og:image" content={image} />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={Astro.url} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={image} />
		<ViewTransitions />
	</head>
	<body class="relative">
		<NavBar idName="main-header" />
		<main
			data-pagefind-body
			class:list={[
				'light motion-preset-fade-lg motion-preset-focus relative z-40 min-h-dvh motion-duration-700'
			]}
		>
			<slot />
		</main>
		<Footer />
	</body>
</html>

<script>
	import Lenis from 'lenis'

	document.addEventListener('astro:page-load', () => {
		type State = 'animate-up' | 'animate-down'
		const lenis = new Lenis()
		const header = document.querySelector('#main-header')

		lenis.on('scroll', (e) => {
			if (!header) return

			const position = e.animatedScroll
			const direction = e.direction
			if (position > 0 && direction > 0) {
				header.classList.remove('animate-down')
				header.classList.add('animate-up')
			} else {
				header.classList.remove('animate-up')
				header.classList.add('animate-down')
			}
		})

		function updateState(state: State) {
			const states = ['animate-up', 'animate-down'] as const
			states.forEach((stateClass) => header?.classList.remove(stateClass))
			header?.classList.add(state)
		}

		header?.addEventListener('mouseenter', () => {
			// console.log('enter header')
			updateState('animate-down')
		})

		function raf(time: number) {
			lenis.raf(time)
			requestAnimationFrame(raf)
		}

		requestAnimationFrame(raf)
	})
</script>
