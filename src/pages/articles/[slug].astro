---
import { actions } from 'astro:actions'
import type { GetStaticPaths } from 'astro'

import MainLayout from '@/layouts/MainLayout.astro'
import ContentPaginationArticle from '@/components/blog/ContentPaginationArticle.astro'
import HeroArticle from '@/components/blog/HeroArticle.astro'
import BreadCrumbsArticle from '@/components/blog/BreadCrumbsArticle.astro'
import Container from '@/components/Container.astro'

import dayjs from 'dayjs'
import 'dayjs/locale/es'
dayjs.locale('es')

const { STRAPI_HOST } = import.meta.env

export const getStaticPaths = (async () => {
	const { data, error } = await actions.getAllArticles()

	if (error) {
		throw new Error('Hubo un error al obtener el artículo')
	}

	const articles = data.articles.data ?? []

	return articles.map((article) => ({
		params: { slug: article.slug },
		props: { article, articles }
	}))
}) satisfies GetStaticPaths

const { article, articles } = Astro.props

const currentArticleId = article.id

// Obtener la lista de IDs de los artículos
const articlesIds = articles.map((article) => article.id)

// Encontrar el índice del artículo actual en la lista de IDs
const currentIndex = articlesIds.indexOf(currentArticleId)

// Si no se encuentra el índice (error de lógica), lanzamos un error
if (currentIndex === -1) {
	throw new Error(`Artículo con ID ${currentArticleId} no encontrado.`)
}

// Obtener el ID del artículo anterior y siguiente de manera circular
const prevArticleId = articlesIds[(currentIndex - 1 + articlesIds.length) % articlesIds.length]
const nextArticleId = articlesIds[(currentIndex + 1) % articlesIds.length]

// Encontrar el artículo anterior y siguiente
const prevArticle = articles.find((article) => article.id === prevArticleId)!
const nextArticle = articles.find((article) => article.id === nextArticleId)!

const { title, createdAt, featuredImage, excerpt, metadata, writer, elements } = article

const { name } = writer
const { metaTitle, metaDescription } = metadata

const image = featuredImage.url.startsWith('http')
	? featuredImage.url
	: `${STRAPI_HOST}${featuredImage.url}`

const currentPath = Astro.url.pathname

const formatPathTitle = (path: string) =>
	path
		.replace('/articles/', '')
		.replace(/-/g, ' ') // Remplazar guiones con espacios sin parar en el primero que encuentre
		.replace(/^./, (str) => str.toUpperCase()) // Convertir el primer carácter a mayúscula

const titleFormatted = formatPathTitle(currentPath)
---

<MainLayout description={metaDescription} image={image} title={`${metaTitle} | La isla del Yoga`}>
	<section
		class="section-top sticky left-0 top-0 flex min-h-screen w-full items-center justify-center py-[calc(var(--header-height)+1rem)] pb-36 xl:px-6"
	>
		<Container className="relative flex h-full flex-col justify-center gap-2">
			<BreadCrumbsArticle title={titleFormatted} />
			<HeroArticle
				author={name}
				title={title}
				createdAt={createdAt}
				excerpt={excerpt}
				image={image}
			/>
		</Container>
	</section>
	<section class="post relative bg-white px-2 py-20 shadow-y-section sm:px-6">
		<ContentPaginationArticle
			elements={elements}
			prevArticle={prevArticle}
			nextArticle={nextArticle}
		/>
	</section>
</MainLayout>

<style>
	@media (orientation: landscape) and (max-height: 500px) {
		.section-top {
			position: static;
			padding-top: calc(var(--header-height) + 1rem);
		}
	}
</style>
