---
import MainLayout from '@/layouts/MainLayout.astro'

const email = Astro.cookies.get('email')?.value ?? ''
const name = Astro.cookies.get('name')?.value ?? ''
const rememberMe = !!email

export const prerender = false
---

<MainLayout title="Contacto | La isla del Yoga">
	<!-- component -->
	<!-- Tailwind Play: https://play.tailwindcss.com/qIqvl7e7Ww  -->

	<div class="flex min-h-screen items-center justify-start bg-white">
		<div class="mx-auto w-full max-w-2xl">
			<h1 class="mb-6 font-medium leading-none">Ponte en contacto conmigo</h1>
			<p class="mt-3 text-[.95rem]">
				Envíame un correo electrónico a <span
					class="text-[.95rem] text-primary underline underline-offset-2"
					>hola@laisladelyoga.com</span
				> o desde este formulario que ves aquí abajo:
			</p>

			<form id="contact-form" class="mt-10">
				<input type="hidden" name="access_key" value="YOUR_ACCESS_KEY_HERE" />
				<div class="grid gap-6 sm:grid-cols-2">
					<div class="relative z-0">
						<input
							type="text"
							name="name"
							class="peer block w-full appearance-none border-0 border-b border-gray-500 bg-transparent px-0 py-2.5 text-sm text-gray-900 focus:border-primary focus:outline-none focus:ring-0"
							placeholder=" "
						/>
						<label
							class="absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-primary"
							>Tu nombre</label
						>
						<span
							id="name-error"
							class="mt-2 inline-block bg-primary px-2 py-1 text-base text-white opacity-0 transition-opacity duration-300"
						></span>
					</div>
					<div class="relative z-0">
						<input
							type="text"
							name="email"
							class="peer block w-full appearance-none border-0 border-b border-gray-500 bg-transparent px-0 py-2.5 text-sm text-gray-900 focus:border-primary focus:outline-none focus:ring-0"
							placeholder=" "
						/>
						<label
							class="absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-primary"
							>Correo electrónico</label
						>
						<span
							id="email-error"
							class="mt-2 inline-block bg-primary px-2 py-1 text-base text-white opacity-0 transition-opacity duration-300"
						></span>
					</div>

					<div class="relative z-0 col-span-2">
						<textarea
							name="message"
							rows="5"
							class="peer block w-full appearance-none border-0 border-b border-gray-500 bg-transparent px-0 py-2.5 text-sm text-gray-900 focus:border-primary focus:outline-none focus:ring-0"
							placeholder=" "></textarea>
						<label
							class="absolute top-3 -z-10 origin-[0] -translate-y-6 scale-75 transform text-sm text-gray-500 duration-300 peer-placeholder-shown:translate-y-0 peer-placeholder-shown:scale-100 peer-focus:left-0 peer-focus:-translate-y-6 peer-focus:scale-75 peer-focus:text-primary"
							>Tu mensaje</label
						>
						<span
							id="message-error"
							class="mt-2 inline-block bg-primary px-2 py-1 text-base text-white opacity-0 transition-opacity duration-300"
						></span>
					</div>
					<div class="relative z-0 col-span-2 flex items-center">
						<input
							id="remember_me"
							name="remember_me"
							type="checkbox"
							checked={rememberMe}
							class="h-4 w-4 rounded border-gray-300 bg-blue-500 focus:ring-blue-400"
						/>
						<label for="remember_me" class="ml-2 block text-sm text-gray-800"> Recuérdame </label>
					</div>
				</div>
				<button id="btn-submit" type="submit" class="btn-submit mt-5 rounded-md px-10 py-2"
					>Enviar Mensaje</button
				>
			</form>
		</div>
	</div>
</MainLayout>

<style>
	.btn-submit {
		color: var(--text);
		box-shadow: 0 0 0 1px var(--text) inset;
		transition:
			box-shadow 0.3s ease-in-out,
			color 0.3s ease-in-out;
		&:hover {
			color: var(--white);
			box-shadow: 0 0 0 100px var(--text) inset;
		}
	}
</style>

<script>
	import type { ValidationError } from '@/interfaces/contact.interface'
	import { actions } from 'astro:actions'
	import Swal from 'sweetalert2'

	// Elementos HTML
	const form = document.getElementById('contact-form') as HTMLFormElement
	const btnSubmit = document.getElementById('btn-submit') as HTMLButtonElement
	const nameError = document.getElementById('name-error') as HTMLSpanElement
	const emailError = document.getElementById('email-error') as HTMLSpanElement
	const messageError = document.getElementById('message-error') as HTMLSpanElement

	const elementErrors = {
		name: nameError,
		email: emailError,
		message: messageError
	}

	form.addEventListener('submit', async (e) => {
		e.preventDefault()
		btnSubmit.setAttribute('disabled', 'disabled')

		const formData = new FormData(form)

		const { data, error } = await actions.sendMessage(formData)

		if (error) {
			const errorMessage = error.message
			const errorMessageArray = errorMessage.replace('Failed to validate: ', '')

			// Array con mensajes de errores
			const errors: ValidationError[] = JSON.parse(errorMessageArray)

			// Limpiar los mensajes de error antes de procesar nuevos errores
			Object.values(elementErrors).forEach((span) => {
				span.classList.add('opacity-0')
				span.classList.remove('opacity-100')
			})

			errors.forEach((error) => {
				const field = error.path[0] as keyof typeof elementErrors

				// Mostrar el mensaje de error en el <span> correspondiente
				elementErrors[field].classList.remove('opacity-0')
				elementErrors[field].classList.add('opacity-100')
				elementErrors[field].innerText = error.message
			})

			btnSubmit.removeAttribute('disabled')
			return
		}

		// Limpiar los mensajes de error antes de procesar nuevos errores
		Object.values(elementErrors).forEach((span) => {
			span.classList.add('hidden')
			span.classList.remove('block')
		})

		// Limpiar el formulario
		form.reset()

		// Desplazarse hacia arriba
		window.scrollTo({
			top: 0,
			behavior: 'smooth' // Esto es opcional para un desplazamiento suave
		})

		Swal.fire({
			title: `¡Gracias, ${data.name}!`,
			text: 'Tu mensaje ha sido enviado con éxito',
			confirmButtonText: 'Cerrar',
			confirmButtonColor: 'var(--primary)',
			scrollbarPadding: false,
			customClass: {
				title: 'text-primary',
				confirmButton: 'rounded-xl	'
			}
		}).then(() => {
			btnSubmit.removeAttribute('disabled')
			Object.values(elementErrors).forEach((span) => {
				span.innerText = ''
			})
		})
	})
</script>
