---
import type { Datum } from '@/interfaces'
import { Image } from 'astro:assets'

interface Props {
	prevArticle: Datum | undefined
	nextArticle: Datum | undefined
}

const { prevArticle, nextArticle } = Astro.props
---

<div
	class="relative mx-auto mt-12 flex w-full flex-col items-center justify-center gap-16 xl:flex-row xl:justify-between"
	id="pagination"
>
	<a
		id="prev"
		data-img={prevArticle?.featuredImage.url}
		class="group relative inline-block w-[max-content] text-left"
		href={`/articles/${prevArticle?.slug}`}
	>
		{
			prevArticle && (
				<Image
					src={prevArticle?.featuredImage.url}
					alt={prevArticle?.title}
					width={150}
					height={150}
					class="pointer-events-none absolute bottom-full left-1/2 w-[150px] -translate-x-1/2 scale-75 rounded-[3px] opacity-0 motion-ease-spring-bounciest group-hover:opacity-100 group-hover:motion-scale-in-110"
				/>
			)
		}

		<h3 class="text-primary xl:text-4xl">{prevArticle?.title}</h3>
	</a>
	<a
		id="next"
		data-img={nextArticle?.featuredImage.url}
		class="group relative inline-block w-[max-content] text-right"
		href={`/articles/${nextArticle?.slug}`}
	>
		{
			nextArticle && (
				<Image
					src={nextArticle?.featuredImage.url}
					alt={nextArticle?.title}
					width={150}
					height={150}
					class="pointer-events-none absolute bottom-full left-1/2 w-[150px] -translate-x-1/2 scale-75 rounded-[3px] opacity-0 motion-ease-spring-bounciest group-hover:opacity-100 group-hover:motion-scale-in-110"
				/>
			)
		}
		<h3 class="text-primary xl:text-4xl">{nextArticle?.title}</h3>
	</a>
</div>

<script>
	document.addEventListener('astro:page-load', () => {
		const prev = document.getElementById('prev') as HTMLAnchorElement
		const next = document.getElementById('next') as HTMLAnchorElement

		const images = document.querySelectorAll('img')
		let randomAngle = -3

		images.forEach((image) => {
			image.style.transition = 'transform 0.15s ease-out, opacity 0.15s ease-out'
		})

		function handleImageRemove(anchor: HTMLAnchorElement) {
			randomAngle = Math.random() * 6 - 3
			const imageLink = anchor.querySelector('img') as HTMLImageElement
			imageLink.style.transform = ''
			imageLink.classList.remove('motion-scale-in-110')
		}

		function handleMouseMove(e: MouseEvent, anchor: HTMLAnchorElement) {
			const { clientX, clientY } = e
			const target = e.target as HTMLAnchorElement
			const imageLink = anchor.querySelector('img') as HTMLImageElement

			const rect = target.getBoundingClientRect()

			const { width, height, top, left } = rect

			const x = ((clientX - (left + width / 2)) / width) * -50
			const y = ((clientY - (top + height / 2)) / height) * -25

			imageLink.style.transform = `translate(-50%, 0%) translate(${x}px, ${y}px) rotate(${randomAngle}deg)`
		}

		// Agregar event listeners para los enlaces prev y next
		if (prev) {
			prev.addEventListener('mouseleave', () => handleImageRemove(prev))
			prev.addEventListener('mousemove', (e) => handleMouseMove(e, prev))
		}
		if (next) {
			next.addEventListener('mouseleave', () => handleImageRemove(next))
			next.addEventListener('mousemove', (e) => handleMouseMove(e, next))
		}
	})
</script>
